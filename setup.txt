1. Install django 3.0.2

$ pip3 install Django==3.0.2
$ pip3 install psycopg2

2. install postgresql 

$ sudo apt-get -y install postgresql

3. Clone the PoC environment

$ git clone https://github.com/Saferman/CVE-2020-7471

4. In postgresql shell, create a testuser, and then create the sensitive information we want to read

CREATE DATABASE test;
postgres=# CREATE USER cveuser WITH PASSWORD 'password';
CREATE ROLE
postgres=# ALTER ROLE cveuser SET client_encoding TO 'utf8';
ALTER ROLE
postgres=# ALTER ROLE cveuser SET default_transaction_isolation TO 'read committed';
ALTER ROLE
postgres=# ALTER ROLE cveuser SET timezone TO 'UTC';
ALTER ROLE
postgres=# GRANT ALL PRIVILEGES ON DATABASE test TO cveuser;
GRANT



5. In database configuration (settings.py):
# if you follow previous db user creation, you may skip this step.


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'test', # 数据库名称
        'USER': 'cveuser',
        'PASSWORD': 'password',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}

6. DB migration: 

python3 manage.py migrate
python3 manage.py makemigrations vul_app
python3 manage.py migrate vul_app


7. test
python3 CVE-2020-7471.py

# In this example, we are reading user passwords from "vul_app_credential" table, which is also initialized in the script.
# By changing username at main section, we can read password for different usernames. Currently we only support admin and user1, as we only push these two entry into the table.


